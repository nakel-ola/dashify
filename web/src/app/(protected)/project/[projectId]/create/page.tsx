"use client";

import CustomInput from "@/components/custom-input";
import { useProjectStore } from "../../store/project-store";
import { useFormik } from "formik";
import { ColumnsCard } from "./features/columns-card";
import { Button } from "@/components/ui/button";
import { MoonLoader } from "react-spinners";
import { type ColumnType, Schema, type SchemaType } from "./schema";
import { ForeignSheet } from "./features/foreign-sheet";

type DataType = {
  name: string;
  dataType:
    | "int2"
    | "int4"
    | "int8"
    | "float4"
    | "float8"
    | "numeric"
    | "json"
    | "jsonb"
    | "text"
    | "varchar"
    | "uuid"
    | "date"
    | "time"
    | "timetz"
    | "timestamp"
    | "timestamptz"
    | "bool";
  isPrimary: boolean;
  isNullable: boolean;
  isUnique: boolean;
  isArray: boolean;
  isIdentify: boolean;
  defaultValue?: string | null;
};

const formatPostgresDataType = (items: DataType[]) => {
  const results: string[] = [];

  const primaries = items.filter((item) => item.isPrimary === true);

  for (let i = 0; i < items.length; i++) {
    const item = items[i];

    let column = `${item.name} ${dataType[item.dataType]}`;

    if (item.isArray) column += "[]";

    if (item.isIdentify) column += " GENERATED BY DEFAULT AS IDENTITY";

    if (item.isPrimary && primaries.length === 1) column += " PRIMARY KEY";

    if (item.isUnique) column += " UNIQUE";

    if (item.defaultValue !== null && item.defaultValue !== undefined)
      column += ` DEFAULT ${formatDefaultValue(item.defaultValue)}`;

    if (!item.isNullable) column += " NOT NULL";

    results.push(column);
  }

  if (primaries.length > 1) {
    results.push(
      `PRIMARY KEY (${primaries.map((primary) => primary.name).join(", ")})`
    );
  }

  return results;
};

const formatDefaultValue = (value: string | null) => {
  if (value === "now()") return "CURRENT_TIME";
  if (value === "(now() at time zone 'utc)")
    return "(CURRENT_TIMESTAMP AT TIME ZONE 'UTC')::TIME";
  if (value === "gen_random_uuid()") return "gen_random_uuid()";

  if (value === "") return `""`;

  if (!isNaN(value as any)) return Number(value);

  return `"${value}"`;
};

const dataType: Record<DataType["dataType"], string> = {
  int2: "SERIAL",
  int4: "SERIAL",
  int8: "BIGSERIAL",
  numeric: "NUMERIC",
  float4: "FLOAT4",
  float8: "FLOAT8",
  json: "JSON",
  jsonb: "JSONB",
  text: "TEXT",
  varchar: "VARCHAR(255)",
  uuid: "UUID",
  date: "DATE",
  time: "TIME",
  timetz: "TIMETZ",
  timestamp: "TIMESTAMP",
  timestamptz: "TIMESTAMPTZ",
  bool: "BOOL",
};

export default function Create() {
  const project = useProjectStore((store) => store.project);

  const {
    handleSubmit,
    handleChange,
    handleBlur,
    values,
    errors,
    setFieldValue,
    resetForm,
    isValid,
    isSubmitting,
    setSubmitting,
  } = useFormik<SchemaType>({
    initialValues: {
      name: "",
      columns: [
        {
          name: "id",
          dataType: "int8",
          isPrimary: true,
          isNullable: false,
          defaultValue: null,
          isArray: false,
          isIdentify: true,
          isUnique: false,
        },
        {
          name: "created_at",
          dataType: "timestamptz",
          defaultValue: "now()",
          isPrimary: false,
          isNullable: false,
          isArray: false,
          isIdentify: false,
          isUnique: false,
        },
      ],
    },
    validationSchema: Schema,
    validateOnChange: true,
    validateOnBlur: true,
    validateOnMount: true,
    onSubmit: (values) => {
      console.log(formatPostgresDataType(values.columns as DataType[]));

      setSubmitting(false);
    },
  });

  const removeColumn = (index: number) => {
    let items = [...values.columns];

    items.splice(index, 1);

    setFieldValue("columns", items);
  };

  const addColumn = () => {
    setFieldValue("columns", [
      ...values.columns,
      {
        name: "",
        dataType: "",
        defaultValue: null,
        isPrimary: false,
        isNullable: true,
        isArray: false,
        isIdentify: false,
        isUnique: false,
      },
    ]);
  };

  const updateColumn = <T extends keyof ColumnType>(
    index: number,
    key: T,
    value: ColumnType[T]
  ) => {
    let items = [...values.columns];

    items[index][key] = value;

    setFieldValue("columns", items);
  };

  return (
    <div className="flex justify-center py-10">
      <div className="w-[90%] lg:w-[65%] ">
        <h2 className="text-4xl font-semibold leading-none tracking-tight">
          Create a new{" "}
          {project?.database === "mongodb" ? "collection" : "table"}
        </h2>

        <p className="text-base text-gray-dark dark:text-gray-light pt-2">
          Fill in the details. Click Save when you&apos;re done.
        </p>

        <form onSubmit={handleSubmit} className="space-y-6 mt-6 w-full">
          <CustomInput
            label="Name"
            name="name"
            type="string"
            required
            readOnly={isSubmitting}
            value={values.name}
            onChange={handleChange}
            onBlur={handleBlur}
            error={
              errors.name && values.name.length > 0 ? errors.name : undefined
            }
            showErrorMessage={false}
          />

          {/* <div className="h-screen"></div> */}

          <ColumnsCard
            columns={values.columns}
            removeColumn={removeColumn}
            addColumn={addColumn}
            updateColumn={updateColumn}
          />

          <div className="flex">
            <Button type="submit" className="ml-auto">
              Create {project?.database === "mongodb" ? "collection" : "table"}
              <MoonLoader
                size={20}
                color="white"
                className="ml-2 text-white"
                loading={isSubmitting}
              />
            </Button>
          </div>
        </form>

        <ForeignSheet />
      </div>
    </div>
  );
}
